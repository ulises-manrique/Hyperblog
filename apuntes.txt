Clase 7: linea de comandos.
-> "touch archivo.extencion" crea un archivo.
-> "cat archivo.extencion" permite ver el contenido de un archivo.
->"history" permite ver los comandos utilizados anteriormente con un numero de comando.
-> "rm" elimina archivos de manera permanente, utilizar con mcho cuidado.

"!no.comando" repide un comando.

clase 8: staging.

-> staging: area en memoria ram donde se agregan los cambios de manera inicial; el archivo se queda a la espera de ser enviado al repositorio (o agragar archivos, ser eliminado, etc). Sucede con git add.

-> "git add" se mandan los cambios al staging y se "trakean" (rastrean).

->"git commit" se mandan los cambios al repositorio"
->"git commit -m '...'" mando los cambios al repositorio con un comentario

->"checkout" obtener los cambios del proyecto, archivos o ciertos archivos.

clase 9: ramas.

-> "merge" fuciona dos ramas.

Clase 10: creacion del repositorio.

-> "git init" crea el repositorio.

-> Carpeta oculta ".git" es la base de datos atomica de git

Clase 11: Analizar cambios de en los archivos.

->"Git show archivo.extencion" Muestra los cambios de un archivo entre la utima version y la version anterior.

Agregar comentarios en los "commit" son buenas practicas.

-> "git diff No.commit No.commit" Muestra los cambios entre versiones de archivos, el orden afecta la forma en la que se muestra. Solomuestra las diferencias entre versiones del mismo archivo. 

clase 12: reset y checkout 

->"git reset No.version --hard/soft" 

->"git log --stat" muestra los cambios de manera especifica.

->"git checkout No.archivo" muestra la version anterior de un archivo. Si se guarda el archivo despues de este comando, esa version del archivo se vuelve la version master. 

->"git mv nom.archivo <nueva ruta>" permite cambiar de ubicacion un archivo y/o renombrarlo. Este comando hay que utilizarlo para no perder el traking del archivo.

clase 13: git reset vs git rm.

->"git rm" Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. 

->"git rm --cached" Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.

->"git rm --force" Elimina los archivos de Git y del disco duro.

->"git reset no.version" Borramos todos los cambios apartir de la version indicada y esa version se vuelve la version master.

->"git reset no.version --soft" Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.

->"git reset no.version --hard" Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

->"git reset HEAD" Este es el comando para sacar archivos del área de Staging. Los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add.

clase 14: flujo de trabajo basico con un repositorio remoto.

->"git clone url" Crea una copoia del master en el directorio de trabajo y crea una base de datos historica en el repositorio local.

->"git pull" Copia la base de datos al repositorio local y copia el directorio de trabajo. 

clase 15; introduccion a ramas o branches de git.

"Master" rama principal.

->"git commit -am '...'" hace "add" automaticamente a archivos previamente existentes y que ya se halla hecho "add" con anterioridad.

->"git branch nombre_rama" crea una rama apartir de donde se encuentre el apuntador.

->"git checkout nombre_rama" cambia de rama de trabajo.

"Head" es un indicador de cual version de commit se esta trabajando.

Clase 16: Fusion de ramas con git merge.

"merge" permite fusionar ramas. La rama en la que se ejecuta "merge" se vuelve la principal, si una misma linea se edita en diferentes ramas esto genera un conflicto. 

->" git merge nombre_rama" fusiona las ramas donde se encuentra el "Head" y la rama indicada en el comando.

clase 17: Resolucion de conflictos al hacer un merge.

1.- Guardar la calma.
2.- Leer los archivos conflictuados.
3.- Entender que es lo que sucede con los archivos en conflicto y buscar una solucion.
4.- Si el trabajo es en equipo hablar con la persona que realizo los cambios que generan conflicto y buscar una solucion. 

clase 18: Uso de Github.

->"git remote add origin url" indica el repositorio remoto. 
->"git remote -v" muestra las url's correspondientes para realizar fetch/pull y push.
->"git push origin <branch>" manda la rama indicada a el repositorio remoto.
->"git pull origin branch" Actualiza el repositorio desde el servidor al repositorio local. origin es el repositorio remoto, branch es la rama a la que se "copia" el repositorio, puede ser en la rama master o en cualquier otra

Clase 20: configuracion de llaves ssh en local.

Generar una nueva llave SSH: (Cualquier sistema operativo)

->"ssh-keygen -t rsa -b 4096 -C "youremail@example.com""

Comprobar proceso y agregarlo (Windows)

    eval $(ssh-agent - s)
    ssh-add ~/.ssh/id_rsa

Comprobar proceso y agregarlo (Mac)

    eval "$(ssh-agent -s)"

clase 21: Conexion a github con ssh.

siempre crear una llave ssh por cada equipo utilizado. Ejemplo: 3 computadoras diferentes, 3 llaves ssh diferentes, una por cada equipo.

Post en platzi de como realizar la configuracion de llaves ssh en git y github: https://platzi.com/tutoriales/1557-git-github/4067-configurar-llaves-ssh-en-git-y-github/

Clase 22: Tags y versiones en git y github.

->'alias nombre_comando="comando_y_sus_argumentos"'  Permite encapsular comandos largos en 'alias' para un uso mas practico.

->'git tag -a nom_tag -m "mensage" hash' Permite etiquetar un commit y añadir un comentario.

->'git show-ref --tags' Muestra los tags existentes y el commit correspondiente de la etiqueta.

->'git tag´ Muestra las etiquetas existentes.

->'git tag -d nom_tag' Elimina la etiqueta indicada.

->"git push origin --tags" Manda las etiquetas al repositorio remoto. 

->'git push origin :refs/tags/nom_tag_eliminado' Elimina la etiqueta indicada en el servidor remoto.

clase 23: manejo de ramas.

->'git checkout nombre_rama' Permite cambiar de rama.

->'git branch' Muestra todas las ramas existentes e indica done se encuentra el apuntador.

->'git show-banch' muestra las ramas que existen y su historia.

->'git show-branch --all' muestra las ramas que exiaten y su historia e informacion complementaria.

